"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAutoGeneratedPlaylist = exports.getRecommendedByProfile = exports.getPublicPlaylist = exports.getPublicProfile = exports.getPublicUploads = exports.getUploads = exports.updateFollower = void 0;
const audio_1 = __importDefault(require("../models/audio"));
const user_1 = __importDefault(require("../models/user"));
const mongoose_1 = require("mongoose");
const playlist_1 = __importDefault(require("../models/playlist"));
const history_1 = __importDefault(require("../models/history"));
const helper_1 = require("../utils/helper");
const autoGeneratedPlaylist_1 = __importDefault(require("../models/autoGeneratedPlaylist"));
const updateFollower = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { profileId } = req.params;
    let status;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "invalid profile id!" });
    const profile = yield user_1.default.findById(profileId);
    if (!profile)
        return res.status(404).json({ error: "profile not found!" });
    const alreadyAFollower = yield user_1.default.findOne({
        _id: profileId,
        followers: req.user.id,
    });
    if (alreadyAFollower) {
        yield user_1.default.updateOne({ _id: profileId }, { $pull: { followers: req.user.id } });
        status = "removed";
    }
    else {
        yield user_1.default.updateOne({ _id: profileId }, { $addToSet: { followers: req.user.id } });
        status = "added";
    }
    if (status === "added") {
        yield user_1.default.updateOne({ _id: req.user.id }, { $addToSet: { followings: profileId } });
    }
    if (status === "removed") {
        yield user_1.default.updateOne({ _id: req.user.id }, { $pull: { followings: profileId } });
    }
    res.json({ status });
});
exports.updateFollower = updateFollower;
const getUploads = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const data = yield audio_1.default.find({ owner: req.user.id })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt");
    const audios = data.map((item) => {
        var _a;
        return {
            id: item._id,
            title: item.title,
            about: item.about,
            file: item.file.url,
            poster: (_a = item.poster) === null || _a === void 0 ? void 0 : _a.url,
            date: item.createdAt,
            owner: { name: req.user.name, id: req.user.id },
        };
    });
    res.json({ audios });
});
exports.getUploads = getUploads;
const getPublicUploads = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { limit = "20", pageNo = "0" } = req.query;
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Invalid profile id!" });
    const data = yield audio_1.default.find({ owner: profileId })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt")
        .populate("owner");
    const audios = data.map((item) => {
        var _a;
        return {
            id: item._id,
            title: item.title,
            about: item.about,
            file: item.file.url,
            poster: (_a = item.poster) === null || _a === void 0 ? void 0 : _a.url,
            date: item.createdAt,
            owner: { name: item.owner.name, id: item.owner._id },
        };
    });
    res.json({ audios });
});
exports.getPublicUploads = getPublicUploads;
const getPublicProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { profileId } = req.params;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Invalid profile id!" });
    const user = yield user_1.default.findById(profileId);
    if (!user)
        return res.status(422).json({ error: "User not found!" });
    res.json({
        profile: {
            id: user._id,
            name: user.name,
            followers: user.followers.length,
            avator: (_a = user.avatar) === null || _a === void 0 ? void 0 : _a.url,
        },
    });
});
exports.getPublicProfile = getPublicProfile;
const getPublicPlaylist = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { profileId } = req.params;
    const { limit = "20", pageNo = "0" } = req.query;
    if (!(0, mongoose_1.isValidObjectId)(profileId))
        return res.status(422).json({ error: "Invalid profile id!" });
    const playlist = yield playlist_1.default.find({
        owner: profileId,
        visibility: "public",
    })
        .skip(parseInt(limit) * parseInt(pageNo))
        .limit(parseInt(limit))
        .sort("-createdAt");
    if (!playlist)
        return res.json({ playlist: [] });
    res.json({
        playlist: playlist.map((item) => {
            return {
                id: item._id,
                title: item.title,
                itemsCount: item.items.length,
                visibility: item.visibility,
            };
        }),
    });
});
exports.getPublicPlaylist = getPublicPlaylist;
const getRecommendedByProfile = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const user = req.user;
    let matchOptions = { $match: { _id: { $exists: true } } };
    if (user) {
        const category = yield (0, helper_1.getUsersPreviousHistory)(req);
        if (category.length) {
            matchOptions = { $match: { category: { $in: category } } };
        }
    }
    const audios = yield audio_1.default.aggregate([
        matchOptions,
        {
            $sort: {
                "likes.count": -1
            }
        },
        { $limit: 10 },
        {
            $lookup: {
                from: "users",
                localField: "owner",
                foreignField: "_id",
                as: "owner"
            }
        },
        { $unwind: "$owner" },
        {
            $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                category: "$category",
                about: "$about",
                file: "$file.url",
                poster: "$poster.url",
                owner: { name: "$owner.name", id: "$owner._id" }
            }
        }
    ]);
    res.json({ audios });
});
exports.getRecommendedByProfile = getRecommendedByProfile;
const getAutoGeneratedPlaylist = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const [result] = yield history_1.default.aggregate([
        { $match: { owner: req.user.id } },
        { $unwind: "$all" },
        { $group: { _id: "$all.audio", items: { $addToSet: "$all.audio" } } },
        { $sample: { size: 20 } },
        { $group: { _id: null, items: { $push: "$_id" } } }
    ]);
    const title = "Mix 20";
    if (result) {
        yield playlist_1.default.updateOne({ owner: req.user.id, title }, { $set: { title, items: result.items, visibility: "auto" } }, { upsert: true });
    }
    const category = yield (0, helper_1.getUsersPreviousHistory)(req);
    let matchOptions = { $match: { _id: { $exists: true } } };
    if (category.length) {
        matchOptions = { $match: { title: { $in: category } } };
    }
    const agpl = yield autoGeneratedPlaylist_1.default.aggregate([
        matchOptions,
        { $sample: { size: 4 } },
        { $project: {
                _id: 0,
                id: "$_id",
                title: "$title",
                itemsCount: { $size: "$items" }
            } }
    ]);
    const playlist = yield playlist_1.default.findOne({ owner: req.user.id, title });
    const finalList = agpl.concat({
        id: playlist === null || playlist === void 0 ? void 0 : playlist.id,
        title: playlist === null || playlist === void 0 ? void 0 : playlist.title,
        itemsCount: playlist === null || playlist === void 0 ? void 0 : playlist.items.length
    });
    res.json({ playlist: finalList });
});
exports.getAutoGeneratedPlaylist = getAutoGeneratedPlaylist;
